/*!
DataTables Bootstrap 3 integration
Â©2011-2015 SpryMedia Ltd - datatables.net/license
 */
(function (b) {
	"function" === typeof define && define.amd ? define(["jquery", "datatables.net"], function (a) {
		return b(a, window, document)
	}) : "object" === typeof exports ? module.exports = function (a, d) {
		a || (a = window);
		if (!d || !d.fn.dataTable)
			d = require("datatables.net")(a, d).$;
		return b(d, a, a.document)
	}
	 : b(jQuery, window, document)
})(function (b, a, d, m) {
	var f = b.fn.dataTable;
	b.extend(!0, f.defaults, {
		dom: "<'row'<'col-sm-6'l><'col-sm-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
		renderer: "bootstrap",
		language: {
			paginate: {
			  previous: '<i class="fa fa-fw fa-chevron-left"></i>',
			  next: '<i class="fa fa-fw fa-chevron-right"></i>'
			}
		}
	});
	b.extend(f.ext.classes, {
		sWrapper: "dataTables_wrapper form-inline dt-bootstrap",
		sFilterInput: "form-control input-xs",
		sLengthSelect: "form-control input-xs",
		sProcessing: "dataTables_processing panel panel-default"
	});
	f.ext.renderer.pageButton.bootstrap = function (a, h, r, s, j, n) {
		var o = new f.Api(a),
		t = a.oClasses,
		k = a.oLanguage.oPaginate,
		u = a.oLanguage.oAria.paginate || {},
		e,
		g,
		p = 0,
		q = function (d, f) {
			var l,
			h,
			i,
			c,
			m = function (a) {
				a.preventDefault();
				!b(a.currentTarget).hasClass("disabled") && o.page() != a.data.action && o.page(a.data.action).draw("page")
			};
			l = 0;
			for (h = f.length; l < h; l++)
				if (c = f[l], b.isArray(c))
					q(d, c);
				else {
					g = e = "";
					switch (c) {
					case "ellipsis":
						e = "&#x2026;";
						g = "disabled";
						break;
					case "first":
						e = k.sFirst;
						g = c + (0 < j ? "" : " disabled");
						break;
					case "previous":
						e = k.sPrevious;
						g = c + (0 < j ? "" : " disabled");
						break;
					case "next":
						e = k.sNext;
						g = c + (j < n - 1 ? "" : " disabled");
						break;
					case "last":
						e = k.sLast;
						g = c + (j < n - 1 ? "" : " disabled");
						break;
					default:
						e = c + 1,
						g = j === c ? "active" : ""
					}
					e && (i = b("<li>", {
								"class": t.sPageButton + " " + g,
								id: 0 === r && "string" === typeof c ? a.sTableId + "_" + c : null
							}).append(b("<a>", {
									href: "#",
									"aria-controls": a.sTableId,
									"aria-label": u[c],
									"data-dt-idx": p,
									tabindex: a.iTabIndex
								}).html(e)).appendTo(d), a.oApi._fnBindAction(i, {
							action: c
						}, m), p++)
				}
		},
		i;
		try {
			i = b(h).find(d.activeElement).data("dt-idx")
		} catch (v) {}
		q(b(h).empty().html('<ul class="pagination"/>').children("ul"), s);
		i !== m && b(h).find("[data-dt-idx=" + i + "]").focus()
	};
	return f
});
jQuery.fn.dataTableExt.oApi.fnPagingInfo = function(oSettings){
	return {
		"iStart": oSettings._iDisplayStart,
		"iEnd": oSettings.fnDisplayEnd(),
		"iLength": oSettings._iDisplayLength,
		"iTotal": oSettings.fnRecordsTotal(),
		"iFilteredTotal": oSettings.fnRecordsDisplay(),
		"iPage": Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength),
		"iTotalPages": Math.ceil(oSettings.fnRecordsDisplay() / oSettings._iDisplayLength)
	};
};
jQuery.fn.dataTable.render.moment = function ( from, to, locale ) {
	if ( arguments.length === 1 ) {
		locale = 'en';
		to = from;
		from = 'YYYY-MM-DD';
	}else if ( arguments.length === 2 ) {
		locale = 'en';
	};
	return function ( d, type, row ) {
		if(moment() instanceof moment){
			var m = window.moment( d, from, locale, true );
			return m.format( type === 'sort' || type === 'type' ? 'x' : to );
		}else{
			return d;
		}
	};
};
jQuery.fn.dataTableExt.oApi.fnFilterClear  = function ( oSettings ){
	var i, iLen;
	oSettings.oPreviousSearch.sSearch = "";
	if (typeof oSettings.aanFeatures.f!='undefined'){
		var n = oSettings.aanFeatures.f;
		for ( i=0, iLen=n.length ; i<iLen ; i++ ){
			$('input', n[i]).val( '' );
		}
	};
	for (i=0, iLen=oSettings.aoPreSearchCols.length;i<iLen;i++){
		oSettings.aoPreSearchCols[i].sSearch = "";
	};
	oSettings.oApi._fnReDraw( oSettings );
};
jQuery.fn.dataTable.Api.register( 'sum()', function ( ) {
	return this.flatten().reduce( function ( a, b ) {
		if ( typeof a === 'string' ) {
			a = a.replace(/[^\d.-]/g, '') * 1;
		};
		if ( typeof b === 'string' ) {
			b = b.replace(/[^\d.-]/g, '') * 1;
		};
		return a + b;
	}, 0 );
});